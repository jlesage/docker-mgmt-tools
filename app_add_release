#!/bin/sh

SCRIPTDIR="$(readlink -f "$(dirname "$0")")"

usage() {
    echo "usage: $(basename "$0") APPYML CHANGE [CHANGE...]

Arguments:
    APPYML                     Path to the application's definitions YAML file.
    CHANGE                     Change to be added in the changelog.  Prepend
                               with 'XX:' to set the level.
"
}

die() {
    [ -z "$*" ] || echo "ERROR: $*"
    exit 1
}

die_usage() {
    [ -z "$*" ] || echo "ERROR: $*"
    echo
    usage
    exit 1
}

promptyn() {
    echo -n "$1 (y/n)?"
    old_stty_cfg=$(stty -g)
    stty raw -echo ; answer=$(head -c 1) ; stty $old_stty_cfg
    echo
    echo "$answer" | grep -iq "^y"
}

APPYML="$1"

# Validate arguments.
[ -n "$APPYML" ] || die_usage "Application's definitions YAML file is missing."
[ -f "$APPYML" ] || die_usage "File not found: '$APPYML'"
[ -n "$2" ] || die_usage "At least one change is needed."

shift 1

APPDIR="$(readlink -f "$(dirname "$APPYML")")"
APPFILE="$(basename "$APPYML")"

# Make sure the definitions file is not already modified.
if [ -d "$APPDIR"/.git ] && [ -n "$(git -C "$APPDIR" diff "$APPFILE")" ]; then
    die "$APPFILE already contains modifications."
fi

# Get current version.
CUR_VERSION="$(cat "$APPDIR"/"$APPFILE" | sed -n 's|.*- version: \([0-9.]\+\)$|\1|p' | head -n 1)"
CUR_VERSION_YY_MM="$(echo "$CUR_VERSION" | cut -d'.' -f1-2)"
CUR_VERSION_SEQ="$(echo "$CUR_VERSION" | cut -d'.' -f3)"

# Set the new version.
VERSION_YY_MM="$(date "+%y.%m")"
if [ "$CUR_VERSION_YY_MM" = "$VERSION_YY_MM" ]
then
    VERSION_SEQ="$(expr $CUR_VERSION_SEQ + 1)"
else
    VERSION_SEQ="1"
fi
VERSION="$VERSION_YY_MM.$VERSION_SEQ"
[ "$CUR_VERSION" != "$VERSION" ] || die "Failed to generate version."

echo "Current version: $CUR_VERSION"
echo "New version:     $VERSION"

# Generate the changelog.
CHANGELOG="$(mktemp)"
CHANGELOG_GITHUB="$(mktemp)"
echo "Changes in this release:" >> "$CHANGELOG_GITHUB"
echo "    - version: $VERSION" >> "$CHANGELOG"
echo "      date: $(date +%Y-%m-%d)" >> "$CHANGELOG"
echo "      changes:" >> "$CHANGELOG"
while [ "$#" -gt 0 ]; do
    if echo "$1" | grep -q "^[0-9]\+:"; then
        LEVEL="$(echo "$1" | cut -d':' -f1)"
        CHANGE="$(echo "$1" | cut -d':' -f2-)"
        echo "        - '$LEVEL:$CHANGE'" >> "$CHANGELOG"
        echo "$(printf '%0.s ' $(seq 1 $(expr 2 \* $LEVEL)))- $(echo "$CHANGE" | sed "s/''/'/" )" >> "$CHANGELOG_GITHUB"
    else
        echo "        - '$1'" >> "$CHANGELOG"
        echo "  - $(echo "$1" | sed "s/''/'/" )" >> "$CHANGELOG_GITHUB"
    fi
    shift
done
#echo "Changelog:"
#echo "#############################################"
#cat "$CHANGELOG"
#echo "#############################################"

echo "Changelog GitHub:"
echo "#############################################"
cat "$CHANGELOG_GITHUB"
echo "#############################################"

# Add the release/changelog to appdefs.yml.
cp "$APPDIR"/"$APPFILE" "$APPFILE".bak
sed "/  changelog:/ r $CHANGELOG" "$APPFILE".bak > "$APPDIR"/"$APPFILE"
diff "$APPDIR"/"$APPFILE" "$APPFILE".bak > /dev/null 2>&1
if [ "$?" -ne 1 ]; then
    die "Failed to add the release to $APPFILE."
fi
rm "$APPFILE".bak
rm "$CHANGELOG"

# Commit the change.
if [ -d "$APPDIR"/.git ]; then
    echo "The following changes will be pushed to the git repository:"
    git -C "$APPDIR" --no-pager diff "$APPFILE"
    if promptyn 'Proceed'; then
        git -C "$APPDIR" add "$APPFILE" && \
        git -C "$APPDIR" commit -m "Added changelog for version $VERSION." && \
        git -C "$APPDIR" push origin master
        [ "$?" -eq 0 ] || die "Failed to commit changes."
    else
        exit 1
    fi
fi

# Add release to github.
if [ -d "$APPDIR"/.git ]; then
    if promptyn 'Is this a draft release'; then
        DRAFT="--draft"
    else
        DRAFT=""
    fi

    echo "Adding release to GitHub..."
    gh release create \
        v$VERSION \
        $DRAFT \
        --title "Version $VERSION" \
        --notes-file "$CHANGELOG_GITHUB"

    [ "$?" -eq 0 ] || die "Failed to add release to GitHub."
    rm "$CHANGELOG_GITHUB"
fi

# Update the unRAID template.
"$SCRIPTDIR"/render_templates.sh "$APPDIR" -u

#TODO: Render templates
