#!/usr/bin/python

import argparse
import os
import signal
import subprocess
import sys

import time
import threading


def stop_command(cmd, sig=signal.SIGTERM):
    """Stops the running commands and exits with its return code."""
    cmd.send_signal(sig)
    cmd.wait()
    sys.exit(cmd.returncode)


def periodic_log(interval, message, output=sys.stdout):
    """Log a message at the specified interval."""
    while True:
        time.sleep(interval)
        output.write("{message}\n".format(message=message))


def main():
    """Runs a command and periodically write to the output."""

    # Setup the argument parser.
    parser = argparse.ArgumentParser(
        description=("Runs a command and avoids stalled output by periodically "
                     "writing to the standard error output.")
    )
    parser.add_argument('-i', '--interval',
                        type=int, default=600,
                        help=("Interval at which a message should be written "
                              "to the standard error output."))
    parser.add_argument('-m', '--msg',
                        type=str, default="command still running...",
                        help=("Message to be printed to the standard error "
                              "output."))
    parser.add_argument('command', help="The command to run.")
    parser.add_argument('args', nargs=argparse.REMAINDER,
                        help="Arguments to pass to the command.")

    # Parse arguments.
    args = parser.parse_args()

    # Execute the command.
    p = subprocess.Popen([args.command] + args.args)

    # Setup signals
    signal.signal(signal.SIGTERM, lambda sig, frame: stop_command(p, sig))

    # Setup the logging thread.
    if args.interval > 0:
        thread = threading.Thread(target=periodic_log, args=(args.interval, args.msg))
        thread.daemon = True
        thread.start()

    # Wait for the command to terminate. 
    try:
        p.wait()
    except KeyboardInterrupt:
        stop_command(p)

    sys.exit(p.returncode)


if __name__ == "__main__":
    main()
